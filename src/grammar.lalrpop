use crate::ast::{Expr, Opcode, Literal};
use std::str::FromStr;

grammar;

pub Expr: Box<Expr> = {
    AddExpr,
};

AddOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

AddExpr: Box<Expr> = {
    AddExpr AddOp MultExpr => Box::new(Expr::BinaryOp(<>)),
    MultExpr,
};

MultOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

MultExpr: Box<Expr> = {
    MultExpr MultOp PrimaryExpr => Box::new(Expr::BinaryOp(<>)),
    PrimaryExpr,
};

PrimaryExpr: Box<Expr> = {
    Num => Box::new(Expr::Literal(Literal::Number(<>))),
    Bool => Box::new(Expr::Literal(Literal::Boolean(<>))),
    "(" <Expr> ")",
};

Bool: bool = {
    "True" => true,
    "False" => false,
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};
