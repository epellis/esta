use crate::frontend::ast::*;
use std::str::FromStr;

grammar;

pub Stmts: Vec<Box<Stmt>> = {
    Stmt*,
}

// Comma Macro

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// Nonterminal Symbols - Statements

Stmt: Box<Stmt> = {
    <decl:DeclStmt> ";" => decl,
    <assign:AssignStmt> ";" => assign,
    "while" <cond:Expr> "{" <stmts:Stmts> "}" => Box::new(Stmt::While(cond, Box::new(Stmt::Block(stmts, true)))),
    "if" <cond:Expr> "{" <stmts:Stmts> "}" => {
        Box::new(Stmt::If(cond,
            Box::new(Stmt::Block(stmts, true)),
            Box::new(Stmt::Block(Vec::new(), true))))},
    "for" <init:DeclStmt?> ";" <test:Expr> ";" <increment:AssignStmt?> ";" "{" <body:Stmts> "}" => {
        let mut block = Vec::new();
        if init.is_some() { block.push(init.unwrap()); }
        let mut while_body = Vec::new();
        if increment.is_some() { while_body.push(increment.unwrap()); }
        while_body.extend(body);
        let while_block = Stmt::While(test, Box::new(Stmt::Block(while_body, true)));
        block.push(Box::new(while_block));
        Box::new(Stmt::Block(block, false))},
    "fun" <name:IdentifierName> "(" <params:Comma<IdentifierStruct>> ")" "->" <ret:IdentifierName> "{" <body:Stmts> "}" => {
        Box::new(Stmt::FunDecl(
            Identifier::new_typed(name, ret),
            params,
            Box::new(Stmt::Block(body, true))))},
    "fun" <name:IdentifierName> "(" <params:Comma<IdentifierStruct>> ")" "{" <body:Stmts> "}" => {
        Box::new(Stmt::FunDecl(
            Identifier::new(name),
            params,
            Box::new(Stmt::Block(body, true))))},
    "struct" <id:IdentifierName> "{" <fields:Comma<IdentifierStruct>> "}" => {
        Box::new(Stmt::Struct(
            id,
            fields,
        ))
    },
    "return" <value:Expr?> ";" => Box::new(Stmt::Return(value)),
    <proc:FuncExpr> ";" => Box::new(Stmt::Assignment(Box::new(Expr::Literal(Literal::Nil)), proc)),
};

DeclStmt: Box<Stmt> = {
    "var" <id:IdentifierStruct> "=" <rhs:Expr> => {
        let mut block = Vec::new();
        block.push(Box::new(Stmt::Declaration(id.clone())));
        let lhs = Box::new(Expr::Id(id));
        block.push(Box::new(Stmt::Assignment(lhs, rhs)));
        Box::new(Stmt::Block(block, false))
    },
    "var" <id:IdentifierStruct> => Box::new(Stmt::Declaration(id)),
};

AssignStmt: Box<Stmt> = {
    <lhs:Expr> "=" <rhs:Expr> => Box::new(Stmt::Assignment(lhs, rhs)),
};

/// Nonterminal Symbols - Expressions

Expr: Box<Expr> = {
    LogicalExpr,
};

LogicalExpr: Box<Expr> = {
    LogicalExpr LogicalOp EqualityExpr => Box::new(Expr::BinaryOp(<>)),
    EqualityExpr,
};

EqualityExpr: Box<Expr> = {
    EqualityExpr EqualityOp CompareExpr => Box::new(Expr::BinaryOp(<>)),
    CompareExpr,
};

CompareExpr: Box<Expr> = {
    CompareExpr CompareOp AddExpr => Box::new(Expr::BinaryOp(<>)),
    AddExpr,
};

AddExpr: Box<Expr> = {
    AddExpr AddOp MultExpr => Box::new(Expr::BinaryOp(<>)),
    MultExpr,
};

MultExpr: Box<Expr> = {
    MultExpr MultOp UnaryExpr => Box::new(Expr::BinaryOp(<>)),
    UnaryExpr,
};

UnaryExpr: Box<Expr> = {
    UnaryOp UnaryExpr => Box::new(Expr::UnaryOp(<>)),
    FuncHandler
};

FuncHandler: Box<Expr> = {
    FuncExpr,
    PrimaryExpr
};

FuncExpr: Box<Expr> = {
    <name:IdentifierName> "(" <params:Comma<Expr>> ")" => {
        let params = params.iter().cloned().map(|x| *x).collect();
        Box::new(Expr::FunCall(name,
        params))
    },
};

PrimaryExpr: Box<Expr> = {
    Num => Box::new(Expr::Literal(Literal::Number(<>))),
    Bool => Box::new(Expr::Literal(Literal::Boolean(<>))),
    String => Box::new(Expr::Literal(Literal::String(<>))),
    "(" <Expr> ")",
    "Nil" => Box::new(Expr::Literal(Literal::Nil)),
    Identifier,
};

// Terminal Symbols

Identifier: Box<Expr> = {
    <id:IdentifierStruct> => Box::new(Expr::Id(id)),
};

IdentifierStruct: Identifier = {
    <id:IdentifierName> ":" <t:IdentifierName> => Identifier::new_typed(id, t),
    <id:IdentifierName> => Identifier::new(id),
}

IdentifierName: String = {
    r#"[[:alpha:]]\w*"# => String::from(<>),
};

String: String = {
    r#""[^"]*""# => String::from(<>),
};

Bool: bool = {
    "True" => true,
    "False" => false,
};

Num: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap(),
};

LogicalOp: Opcode = {
    "and" => Opcode::And,
    "or" => Opcode::Or,
};

EqualityOp: Opcode = {
    "==" => Opcode::EqualEqual,
    "!=" => Opcode::BangEqual,
};

CompareOp: Opcode = {
    "<" => Opcode::Lesser,
    ">" => Opcode::Greater,
    "<=" => Opcode::LesserEqual,
    ">=" => Opcode::GreaterEqual,
};

MultOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
    "%" => Opcode::Mod,
};

AddOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

UnaryOp: Opcode = {
    "not" => Opcode::Not,
    "-" => Opcode::Sub,
};
